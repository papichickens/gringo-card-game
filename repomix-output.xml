This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
Card.java
Deck.java
Game.java
GameServer.java
Player.java
PlayerHandler.java
Rules.java
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="GameServer.java">
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

public class GameServer {
    private ServerSocket serverSocket;

    public GameServer(ServerSocket serverSocket) {
        this.serverSocket = serverSocket;
    }

    public void startServer() {
        try {
            while(!serverSocket.isClosed()){
                Socket socket = serverSocket.accept();
                System.out.println("Player connected!");
                PlayerHandler playerHandler = new PlayerHandler(socket);

                Thread thread = new Thread(playerHandler);
                thread.start();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void closeServerSocket() {
        try {
            if (serverSocket != null)
                serverSocket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) throws IOException {
        ServerSocket serverSocket = new ServerSocket(1234);
        GameServer gameServer = new GameServer(serverSocket);
        gameServer.startServer();
    }
}
</file>

<file path="PlayerHandler.java">
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.util.ArrayList;

public class PlayerHandler implements Runnable {
    
    public static ArrayList<PlayerHandler> playerHandlers = new ArrayList<>();
    private Socket socket;
    private BufferedReader bufferedReader;
    private BufferedWriter bufferedWriter;
    private String playerUsername;

    public PlayerHandler (Socket socket) throws IOException {
        try {
            this.socket = socket;
            OutputStreamWriter outputStreamWriter = new OutputStreamWriter(socket.getOutputStream());
            this.bufferedWriter = new BufferedWriter(outputStreamWriter);
            InputStreamReader inputStreamReader = new InputStreamReader(socket.getInputStream());
            this.bufferedReader = new BufferedReader(inputStreamReader);
            this.playerUsername = bufferedReader.readLine();

            playerHandlers.add(this);
        
        } catch (IOException e) {
            closeEverything(socket, bufferedReader, bufferedWriter);
        }
    }

    public void broadcastMessage(String message) {
        for (PlayerHandler cl : playerHandlers) {
            System.out.println(cl.playerUsername);
            try {
                if (!cl.playerUsername.equals(playerUsername)){
                    cl.bufferedWriter.write(message);
                    cl.bufferedWriter.newLine();
                    cl.bufferedWriter.flush();
                }
            } catch (IOException e) {
                closeEverything(socket, bufferedReader, bufferedWriter);
            }
        }
    }

    public void removeClientHandler () {
        playerHandlers.remove(this);
        broadcastMessage("Server: " + playerUsername + " has left the game");
    }

    public void closeEverything (Socket socket, BufferedReader bufferedReader, BufferedWriter bufferedWriter) {
        removeClientHandler();
        try {
            if(bufferedReader != null)
                bufferedReader.close();
            if(bufferedWriter != null)
                bufferedWriter.close();
            if(socket != null)
                socket.close(); 
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void run() {
        String messageFromClient;

        while (socket.isConnected()){
            try {
                messageFromClient = bufferedReader.readLine();
                broadcastMessage("Client message: " + messageFromClient + "\n");
            } catch (IOException e) {
                closeEverything(socket, bufferedReader, bufferedWriter);
                break;
            }
        }
    }
}
</file>

<file path="Rules.java">
public class Rules {
    
}
</file>

<file path="Card.java">
import java.util.HashMap;

public class Card {
    private String rank;
    private String suit;
    private Integer value;
    private Powers power;

    public enum Powers {
        SEENSWAP,
        SEE,
        SWAP,
        O
    }

    // use this later
    class IntPowerPair {
        public Integer v;
        public Powers p;
    }

    private static final HashMap<String, Integer> valueOfCard = new HashMap<>();

    static {
        valueOfCard.put("JOKER-JOKER", 0);

        valueOfCard.put("A", 1);

        valueOfCard.put("K-Hearts", -2);
        valueOfCard.put("K-Diamonds", -2);
        valueOfCard.put("K-Spades", 10);
        valueOfCard.put("K-Clubs", 10);

        valueOfCard.put("Q-Hearts", 10);
        valueOfCard.put("Q-Diamonds", 10);
        valueOfCard.put("Q-Spades", 10);
        valueOfCard.put("Q-Clubs", 10);

        valueOfCard.put("J-Hearts", 10);
        valueOfCard.put("J-Diamonds", 10);
        valueOfCard.put("J-Spades", 10);
        valueOfCard.put("J-Clubs", 10);

        valueOfCard.put("10", 10);
        valueOfCard.put("9", 9);
        valueOfCard.put("8", 8);
        valueOfCard.put("7", 7);
        valueOfCard.put("6", 6);
        valueOfCard.put("5", 5);
        valueOfCard.put("4", 4);
        valueOfCard.put("3", 3);
        valueOfCard.put("2", 2);
    }

    public String getRank (){return rank;}
    public String getSuit (){return suit;}
    public Integer getValue (){return value;}

    public Card(String rank, String suit) {
        this.rank = rank;
        this.suit = suit;



        this.value = valueOfCard.get(rank + "-" + suit);
        if (this.value == null)
            this.value = valueOfCard.get(rank);
    }

    @Override
    public String toString() {
        return this.rank + "-" + this.suit;
    }
}
</file>

<file path="Deck.java">
import java.util.ArrayList;
import java.util.Random;

public class Deck {
    //Globals
    private static final String[] rankOrder = {
        "2", "3", "4", "5", "6", "7", "8", "9", "10",
        "J", "Q", "K", "A"
    };

    private static final String[] suitOrder = {
        "Hearts", "Diamonds", "Spades", "Clubs"
    };
    //
    public ArrayList<Card> deck;

    @Override
    public String toString() {
        String s = "";
        for (int i = 0; i < deck.size(); i++) {
            Card c = deck.get(i);
            // c.toString();
            System.out.print(c + ", ");
        }
        return s;
    }

    public Deck(){
        this.deck = new ArrayList<Card>();
    }

    public void fillDeck () {
        for (int rank = 0; rank < rankOrder.length; rank++){
            for (int suit = 0; suit < suitOrder.length; suit++) {
                this.deck.add(new Card(rankOrder[rank], suitOrder[suit]));
            }
        }

        // add jokers
        this.deck.add(new Card("JOKER", "JOKER"));
        this.deck.add(new Card("JOKER", "JOKER"));

        // System.out.println(this.deck);
        // System.out.println(this.deck.size());
    }

    

    public void shuffleDeck () {
        Random rnd = new Random();
        for (int i = deck.size() - 1; i > 0; i-- ) {
            // Swap
            int swap_i = rnd.nextInt(i + 1);
            Card c1 = this.deck.get(i);
            Card c2 = this.deck.get(swap_i);
            deck.set(swap_i, c1);
            deck.set(i, c2);
        }

        // System.out.println(this.deck);
        // System.out.println(this.deck.size());
    }
}
</file>

<file path="Game.java">
public class Game {
    public Deck deck;
    public Deck discardDeck;
    public Player[] players;
    public Integer currentPlayerIndex;
    public Phase gamePhase;
    public Boolean gringoCalled;

    public enum Phase {
        SETUP, PLAYING, ENDING, FINISHED
    }

    public Game () {
        Deck deck = new Deck();
        // List<Player> players = new List<Player>();

        deck.fillDeck();
        deck.shuffleDeck();
        System.out.println(deck.toString());
    }

    private void setupPlayerDecks(Player[] players) {

    }

    public static void main (String[] args) {
        Game g = new Game();
    }
}
</file>

<file path="Player.java">
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.util.Scanner;

public class Player {
    private Deck playerDeck;
    private Socket socket;
    private BufferedReader bufferedReader;
    private BufferedWriter bufferedWriter;
    private String username;

    public Deck getPlayerDeck () {return playerDeck;}

    public Player (Socket socket, String username) throws IOException {
        try {
            this.socket = socket;
            OutputStreamWriter outputStreamWriter = new OutputStreamWriter(socket.getOutputStream());
            this.bufferedWriter = new BufferedWriter(outputStreamWriter);
            InputStreamReader inputStreamReader = new InputStreamReader(socket.getInputStream());
            this.bufferedReader = new BufferedReader(inputStreamReader);
            this.username = username;
        } catch (IOException e) {
            closeEverything(socket, bufferedReader, bufferedWriter);
        }
    }

    public void sendMessage() {
        try {
            bufferedWriter.write(username);
            bufferedWriter.newLine();
            bufferedWriter.flush();

            Scanner scanner = new Scanner(System.in);
            while (socket.isConnected()) {
                String messageToSend = scanner.nextLine();
                bufferedWriter.write(username + ": " + messageToSend);
                bufferedWriter.flush();
            }
        } catch (IOException e) {
            closeEverything(socket, bufferedReader, bufferedWriter);
        }
    }

    public void listenForMessage() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                String messageFromGame;

                while (socket.isConnected()) {
                    try {
                        messageFromGame = bufferedReader.readLine();
                        System.out.println(messageFromGame);
                    } catch (IOException e) {
                        closeEverything(socket, bufferedReader, bufferedWriter);
                    }
                }
            }
        }).start();
    }

    public void closeEverything (Socket socket, BufferedReader bufferedReader, BufferedWriter bufferedWriter) {
        try {
            if(bufferedReader != null)
                bufferedReader.close();
            if(bufferedWriter != null)
                bufferedWriter.close();
            if(socket != null)
                socket.close(); 
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) throws IOException {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter username: ");
        String username = scanner.nextLine();
        // System.out.println(username);

        Socket socket = new Socket("localhost", 1234);
        Player player = new Player(socket, username);
        player.listenForMessage();
        player.sendMessage();
    }
}
</file>

</files>
